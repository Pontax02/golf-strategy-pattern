package edu.estatuas;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */


import java.util.Arrays;


/**
 * Examen de Programación: Sistema de Puntuación de Golf
 *
 * Desarrollar un sistema que calcule las puntuaciones de un partido de golf
 * siguiendo las modalidades "Stroke Play" y "Stableford".
 *
 * REQUISITOS:
 *
 * 1. Implementar las siguientes clases:
 *    - Player: almacena iniciales, handicap, score y puntos Stableford
 *    - ScoreCard: gestiona hasta 4 jugadores (A, B, C, D), lista de hoyos y campo
 *    - Hole: representa un hoyo con su número y par
 *    - StrokePlay: implementa la modalidad de juego stroke play (suma de golpes)
 *    - Stableford: implementa la modalidad de juego Stableford (puntos según diferencia con el par)
 *    - StablefordSystem: enum que representa los diferentes resultados posibles
 *
 * 2. Implementar el patrón Strategy para las modalidades de juego mediante:
 *    - Interfaz GolfPlay
 *    - Clase ComputeCard que aplica la estrategia seleccionada
 *
 * 3. Sistema de puntuación Stableford:
 *    - Double Bogey (≥2 sobre par): -3 puntos
 *    - Bogey (1 sobre par): -1 punto
 *    - Par: 0 puntos
 *    - Birdie (1 bajo par): 2 puntos
 *    - Eagle (2 bajo par): 5 puntos
 *    - Albatross (3 bajo par): 8 puntos
 *
 * 4. Requisitos técnicos:
 *    - Usar Optional para la gestión de jugadores
 *    - Implementar el principio Open/Closed
 *    - Utilizar Streams para el procesamiento de datos
 *
 * El código siguiente muestra el comportamiento esperado del sistema.
 * La salida por consola debe coincidir con los comentarios indicados.
 */
public class App {

    public static void main(String[] args) {

        /*
         * Crea el torneo reutilizando la clase Course proporcionada.
         */
        Course augusta = new Course();

        /*
         * Crea el jugador/a A.
         * Reutiliza la clase Course para añadir el registro de recorrido
         * del jugador A con sus golpes en cada hoyo.
         */
        Byte[] coursePlayerA = {4, 5, 3, 4, 4, 4, 4, 3, 5, 5, 4, 4, 3, 4, 4, 3, 4, 4}; // 71
        Player playerA = new Player("MJ", (byte) 0);
        augusta.addPlayerCourse(playerA, coursePlayerA);

        /*
         * Crea el jugador/a B.
         * Reutiliza la clase Course para añadir el registro de recorrido
         * del jugador B con sus golpes en cada hoyo.
         */
        Byte[] coursePlayerB = {4, 5, 3, 4, 4, 4, 5, 3, 5, 5, 4, 4, 3, 5, 4, 3, 4, 4}; // 73
        Player playerB = new Player("JS", (byte) 0);
        augusta.addPlayerCourse(playerB, coursePlayerB);

        /*
         * Crea la clase ScoreCard
         * y añade a la tarjeta los jugadores A y B
         * Establece en la tarjeta el Course "Augusta".
         */
        ScoreCard scoreCard = new ScoreCard();
        scoreCard.setPlayerA(playerA);
        scoreCard.setPlayerB(playerB);
        scoreCard.setPlayersCourse(augusta);

        /*
         * Calcula el total strokes de los jugadores
         * en la modalidad stroke play.
         * Crea la modalidad de juego StrokePlay.
         * En esta modalidad el total de strokes
         * de un jugador es la suma total de golpes
         * de su recorrido.
         * Implementa el patron strategy.
         * Crea la clase ComputeCard que reciba la tarjeta
         * y la modalidad o estrategia de juego y calcule
         * el total de strokes de cada jugador.
         * Toda la lógica se encuentra en la clase StrokePlay.
         */
        GolfPlay strokePlay = new StrokePlay();
        ComputeCard computeStrokePlay = new ComputeCard(scoreCard, strokePlay);

        /*
         * Guarda en la tarjeta el total de strokes
         * de cada jugador.
         */
        computeStrokePlay.compute();
        /*
         * Muestra por CLI iniciales, strokes y stableford points (0)
         * de cada jugador.
         */
        System.out.println("\n\t ##### STROKE PLAY #####");
        System.out.println(playerA);
        System.out.println("\nCourse A:\s" + Arrays.toString(scoreCard.getPlayerCourse(playerA)));
        System.out.println(playerB);
        System.out.println("\nCourse B:\s" + Arrays.toString(scoreCard.getPlayerCourse(playerB)));
    }
}